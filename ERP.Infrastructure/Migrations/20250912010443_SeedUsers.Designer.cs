// <auto-generated />
using System;
using ERP.Infrastructure.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ERP.Infrastructure.Migrations
{
    [DbContext(typeof(ErpDbContext))]
    [Migration("20250912010443_SeedUsers")]
    partial class SeedUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ERP.Domain.Entities.Auth.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("AccessToken")
                        .HasColumnType("text")
                        .HasColumnName("AccessToken");

                    b.Property<long?>("ExpiresAt")
                        .HasColumnType("bigint")
                        .HasColumnName("ExpiresAt");

                    b.Property<string>("IdToken")
                        .HasColumnType("text")
                        .HasColumnName("IdToken");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Provider");

                    b.Property<string>("ProviderAccountId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ProviderAccountId");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("RefreshToken");

                    b.Property<string>("Scope")
                        .HasColumnType("text")
                        .HasColumnName("Scope");

                    b.Property<string>("SessionState")
                        .HasColumnType("text")
                        .HasColumnName("SessionState");

                    b.Property<string>("TokenType")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TokenType");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Type");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id")
                        .HasName("PK__Accounts__3213E83FFFBE8431");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Provider", "ProviderAccountId" }, "UQ__Accounts__6786C2C75307AB87")
                        .IsUnique();

                    b.ToTable("Accounts", "Auth");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Auth.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Name");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Status");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Permissions__3213E83F8986953C");

                    b.HasIndex(new[] { "Name" }, "UQ__Permissions__72E12F1B1B3B2B3F")
                        .IsUnique();

                    b.ToTable("Permissions", "Auth");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Auth.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Name");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__Roles__3213E83F8E286D4E");

                    b.HasIndex(new[] { "Name" }, "UQ__Roles__72E12F1B32068C24")
                        .IsUnique();

                    b.ToTable("Roles", "Auth");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Auth.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RoleId")
                        .HasColumnOrder(0);

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PermissionId")
                        .HasColumnOrder(1);

                    b.HasKey("RoleId", "PermissionId")
                        .HasName("PK__RolePermissions__RoleId_PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions", "Auth");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Auth.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2")
                        .HasColumnName("Expires");

                    b.Property<string>("SessionToken")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("SessionToken");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id")
                        .HasName("PK__Sessions__3213E83F6D1DFCA1");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "SessionToken" }, "UQ__Sessions__E598F5C811A2DDCB")
                        .IsUnique();

                    b.ToTable("Sessions", "Auth");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Auth.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Addres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Email");

                    b.Property<string>("ExtraData")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("{}")
                        .HasColumnName("ExtraData");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Password");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Phone");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("UserTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserTypeId");

                    b.HasKey("Id")
                        .HasName("PK__Users__3213E83F49253023");

                    b.HasIndex("UserTypeId");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__AB6E616447836532")
                        .IsUnique();

                    b.ToTable("Users", "Auth");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Auth.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK__UserRoles__6EDEA1531A203E84");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "Auth");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Auth.UserTypes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Name");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Status");

                    b.HasKey("Id")
                        .HasName("PK__UserTypes__3213E83F");

                    b.ToTable("UserTypes", "Auth");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Finance.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AccountName");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("AccountNumber");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("AccountType");

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("Balance");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__FinanceAccounts__3213E83F");

                    b.HasIndex(new[] { "AccountNumber" }, "UQ__FinanceAccounts__AccountNumber")
                        .IsUnique();

                    b.ToTable("Accounts", "Finance");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Finance.FinancialTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountId");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Amount");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("TransactionDate");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TransactionType");

                    b.HasKey("Id")
                        .HasName("PK__FinancialTransactions__3213E83F");

                    b.HasIndex(new[] { "AccountId" }, "IX_FinancialTransaction_AccountId");

                    b.ToTable("FinancialTransaction", (string)null);
                });

            modelBuilder.Entity("ERP.Domain.Entities.Inventory.InventoryLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("Description");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("LocationName");

                    b.HasKey("Id")
                        .HasName("PK__InventoryLocations__3213E83F");

                    b.HasIndex(new[] { "LocationName" }, "UQ__InventoryLocations__LocationName")
                        .IsUnique();

                    b.ToTable("InventoryLocations", "Inventory");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Inventory.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrentStock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("CurrentStock");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("Description");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ProductName");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Sku");

                    b.Property<string>("UnitOfMeasure")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UnitOfMeasure");

                    b.HasKey("Id")
                        .HasName("PK__Products__3213E83F");

                    b.HasIndex(new[] { "Sku" }, "UQ__Products__CA1ECF0C")
                        .IsUnique();

                    b.ToTable("Products", "Inventory");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Inventory.StockMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FromLocationId")
                        .HasColumnType("int");

                    b.Property<int?>("InventoryLocationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("MovementDate");

                    b.Property<string>("MovementType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("MovementType");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductId");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.Property<int?>("ToLocationId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__StockMovements__3213E83F");

                    b.HasIndex("FromLocationId");

                    b.HasIndex("InventoryLocationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ToLocationId");

                    b.ToTable("StockMovements", "Inventory");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("OrderDate");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Status");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierId");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("TotalAmount");

                    b.HasKey("Id")
                        .HasName("PK__PurchaseOrders__3213E83F");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseOrder", (string)null);
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.PurchaseOrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductId");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int")
                        .HasColumnName("PurchaseOrderId");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("UnitPrice");

                    b.HasKey("Id")
                        .HasName("PK__PurchaseOrderItems__3213E83F");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderItem", (string)null);
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Address");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ContactEmail");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ContactPhone");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SupplierName");

                    b.HasKey("Id")
                        .HasName("PK__Suppliers__3213E83F");

                    b.ToTable("Supplier", (string)null);
                });

            modelBuilder.Entity("ERP.Domain.Entities.Sales.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CustomerId");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("DueDate");

                    b.Property<DateOnly>("InvoiceDate")
                        .HasColumnType("date")
                        .HasColumnName("InvoiceDate");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("InvoiceNumber");

                    b.Property<int?>("SalesOrderId")
                        .HasColumnType("int")
                        .HasColumnName("SalesOrderId");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Status");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("TotalAmount");

                    b.HasKey("Id")
                        .HasName("PK__Invoices__3213E83F");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("Invoice", (string)null);
                });

            modelBuilder.Entity("ERP.Domain.Entities.Sales.SalesOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CustomerId");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("OrderDate");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Status");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("TotalAmount");

                    b.HasKey("Id")
                        .HasName("PK__SalesOrders__3213E83F");

                    b.ToTable("SalesOrder", (string)null);
                });

            modelBuilder.Entity("ERP.Domain.Entities.Sales.SalesOrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductId");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.Property<int>("SalesOrderId")
                        .HasColumnType("int")
                        .HasColumnName("SalesOrderId");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("UnitPrice");

                    b.HasKey("Id")
                        .HasName("PK__SalesOrderItems__3213E83F");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("SalesOrderItem", (string)null);
                });

            modelBuilder.Entity("ERP.Domain.Entities.Auth.Account", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Auth.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Accounts__UserId__3F466844");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Auth.RolePermission", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Auth.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__RolePermissions__Permission");

                    b.HasOne("ERP.Domain.Entities.Auth.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__RolePermissions__Role");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Auth.Session", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Auth.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Sessions__UserId__440B1D61");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Auth.User", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Auth.UserTypes", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Users_UserTypes");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Auth.UserRole", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Auth.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__UserRoles__RoleId__4F7CD00D");

                    b.HasOne("ERP.Domain.Entities.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__UserRoles__UserId__4E88ABD4");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Finance.FinancialTransaction", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Finance.Account", "Account")
                        .WithMany("FinancialTransactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FinancialTransaction_Accounts_AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Inventory.StockMovement", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Inventory.InventoryLocation", "FromLocation")
                        .WithMany("StockMovementFromLocations")
                        .HasForeignKey("FromLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_StockMovements_FromLocation");

                    b.HasOne("ERP.Domain.Entities.Inventory.InventoryLocation", null)
                        .WithMany("StockMovements")
                        .HasForeignKey("InventoryLocationId");

                    b.HasOne("ERP.Domain.Entities.Inventory.Product", "Product")
                        .WithMany("StockMovements")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_StockMovements_Products");

                    b.HasOne("ERP.Domain.Entities.Inventory.InventoryLocation", "ToLocation")
                        .WithMany("StockMovementToLocations")
                        .HasForeignKey("ToLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_StockMovements_ToLocation");

                    b.Navigation("FromLocation");

                    b.Navigation("Product");

                    b.Navigation("ToLocation");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.PurchaseOrder", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Purchases.Supplier", "Supplier")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PurchaseOrder_Supplier_SupplierId");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.PurchaseOrderItem", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Inventory.Product", "Product")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PurchaseOrderItem_Products_ProductId");

                    b.HasOne("ERP.Domain.Entities.Purchases.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PurchaseOrderItem_PurchaseOrder_PurchaseOrderId");

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Sales.Invoice", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Auth.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Invoice_Users_CustomerId");

                    b.HasOne("ERP.Domain.Entities.Sales.SalesOrder", "SalesOrder")
                        .WithMany("Invoices")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Invoice_SalesOrder_SalesOrderId");

                    b.Navigation("Customer");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Sales.SalesOrderItem", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Inventory.Product", "Product")
                        .WithMany("SalesOrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SalesOrderItem_Products_ProductId");

                    b.HasOne("ERP.Domain.Entities.Sales.SalesOrder", "SalesOrder")
                        .WithMany("SalesOrderItems")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SalesOrderItem_SalesOrder_SalesOrderId");

                    b.Navigation("Product");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Auth.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Auth.Role", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Auth.User", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Auth.UserTypes", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Finance.Account", b =>
                {
                    b.Navigation("FinancialTransactions");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Inventory.InventoryLocation", b =>
                {
                    b.Navigation("StockMovementFromLocations");

                    b.Navigation("StockMovementToLocations");

                    b.Navigation("StockMovements");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Inventory.Product", b =>
                {
                    b.Navigation("PurchaseOrderItems");

                    b.Navigation("SalesOrderItems");

                    b.Navigation("StockMovements");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.PurchaseOrder", b =>
                {
                    b.Navigation("PurchaseOrderItems");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Purchases.Supplier", b =>
                {
                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Sales.SalesOrder", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("SalesOrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
